
merenihladiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000b56  00000bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080017a  0080017a  00000c64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001919  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a36  00000000  00000000  000026b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d16  00000000  00000000  000030eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e1  00000000  00000000  00004507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 37       	cpi	r26, 0x7A	; 122
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e7       	ldi	r26, 0x7A	; 122
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 38       	cpi	r26, 0x86	; 134
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  9e:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_data>:
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a8:	08 95       	ret

000001aa <lcd_gotoxy>:
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <lcd_gotoxy+0xc>
 1ae:	80 58       	subi	r24, 0x80	; 128
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret
 1b6:	80 54       	subi	r24, 0x40	; 64
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_clrscr>:
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1c4:	08 95       	ret

000001c6 <lcd_putc>:
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1cc:	08 95       	ret

000001ce <lcd_puts>:
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	fc 01       	movw	r30, r24
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <lcd_puts+0xe>
 1d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
 1da:	fe 01       	movw	r30, r28
 1dc:	ef 01       	movw	r28, r30
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	80 81       	ld	r24, Z
 1e2:	81 11       	cpse	r24, r1
 1e4:	f8 cf       	rjmp	.-16     	; 0x1d6 <lcd_puts+0x8>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1f0:	84 b1       	in	r24, 0x04	; 4
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 202:	8a b1       	in	r24, 0x0a	; 10
 204:	80 61       	ori	r24, 0x10	; 16
 206:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 208:	8a b1       	in	r24, 0x0a	; 10
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 20e:	8a b1       	in	r24, 0x0a	; 10
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	99 ef       	ldi	r25, 0xF9	; 249
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x32>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x38>
 224:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	9e e4       	ldi	r25, 0x4E	; 78
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x4e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x54>
 240:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x5e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x64>
 250:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x6e>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init+0x74>
 260:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 268:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x84>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init+0x8a>
 276:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 284:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
}/* lcd_init */
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <main>:
};

int main(void)
{

    lcd_init(LCD_DISP_ON);
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
	for (uint8_t i = 0; i < 8; i++)
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <main+0x20>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 2a8:	ec 2f       	mov	r30, r28
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	e0 50       	subi	r30, 0x00	; 0
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_data>

    lcd_init(LCD_DISP_ON);
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8; i++)
 2b6:	cf 5f       	subi	r28, 0xFF	; 255
 2b8:	c8 30       	cpi	r28, 0x08	; 8
 2ba:	b0 f3       	brcs	.-20     	; 0x2a8 <main+0x10>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 2bc:	80 e8       	ldi	r24, 0x80	; 128
 2be:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
	
    //output pin
    DDRB = DDRB | (1<<TRIG);
 2c2:	84 b1       	in	r24, 0x04	; 4
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	84 b9       	out	0x04, r24	; 4
    PORTB = PORTB & ~(1<<TRIG);
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	8f 7d       	andi	r24, 0xDF	; 223
 2cc:	85 b9       	out	0x05, r24	; 5
	
	DDRD = DDRD | (1<<LEDP);
 2ce:	8a b1       	in	r24, 0x0a	; 10
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD & ~(1<<LEDP);
 2d4:	8b b1       	in	r24, 0x0b	; 11
 2d6:	8e 7f       	andi	r24, 0xFE	; 254
 2d8:	8b b9       	out	0x0b, r24	; 11
	
	DDRD = DDRD | (1<<LEDV);
 2da:	8a b1       	in	r24, 0x0a	; 10
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD & ~(1<<LEDV);
 2e0:	8b b1       	in	r24, 0x0b	; 11
 2e2:	8d 7f       	andi	r24, 0xFD	; 253
 2e4:	8b b9       	out	0x0b, r24	; 11
	//input pin
	DDRB = DDRB & ~ (1<<ECHO);
 2e6:	84 b1       	in	r24, 0x04	; 4
 2e8:	8f 7e       	andi	r24, 0xEF	; 239
 2ea:	84 b9       	out	0x04, r24	; 4
    PORTB = PORTB  & ~ (1<<ECHO);
 2ec:	85 b1       	in	r24, 0x05	; 5
 2ee:	8f 7e       	andi	r24, 0xEF	; 239
 2f0:	85 b9       	out	0x05, r24	; 5
	
	DDRC = DDRC & ~ (1<<TEMPERATURE);
 2f2:	87 b1       	in	r24, 0x07	; 7
 2f4:	8d 7f       	andi	r24, 0xFD	; 253
 2f6:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC | (1<<TEMPERATURE);
 2f8:	88 b1       	in	r24, 0x08	; 8
 2fa:	82 60       	ori	r24, 0x02	; 2
 2fc:	88 b9       	out	0x08, r24	; 8
	
	DDRC = DDRC & ~ (1<<PINDISPLAY);
 2fe:	87 b1       	in	r24, 0x07	; 7
 300:	8b 7f       	andi	r24, 0xFB	; 251
 302:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC | (1<<PINDISPLAY);
 304:	88 b1       	in	r24, 0x08	; 8
 306:	84 60       	ori	r24, 0x04	; 4
 308:	88 b9       	out	0x08, r24	; 8
	
	DDRC = DDRC & ~ (1<<PUMP);
 30a:	87 b1       	in	r24, 0x07	; 7
 30c:	87 7f       	andi	r24, 0xF7	; 247
 30e:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC | (1<<PUMP);
 310:	88 b1       	in	r24, 0x08	; 8
 312:	88 60       	ori	r24, 0x08	; 8
 314:	88 b9       	out	0x08, r24	; 8
	
	DDRC = DDRC & ~ (1<<VALVE);
 316:	87 b1       	in	r24, 0x07	; 7
 318:	8f 7e       	andi	r24, 0xEF	; 239
 31a:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC | (1<<VALVE);
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	88 b9       	out	0x08, r24	; 8
	//setting up variables coresponding to switches
	if (((PINC >> PINDISPLAY) & 1) != 0)//button off
 322:	32 9b       	sbis	0x06, 2	; 6
 324:	1a c0       	rjmp	.+52     	; 0x35a <main+0xc2>
	{
		lcd_clrscr();
 326:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
		display = 0;
 32a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <display+0x1>
 32e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <display>
		lcd_init(LCD_DISP_ON);
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
		lcd_gotoxy(0, 0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_puts("Tank:");
 340:	80 e1       	ldi	r24, 0x10	; 16
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		lcd_gotoxy(0, 1);
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_puts("Temp:");		
 350:	86 e1       	ldi	r24, 0x16	; 22
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 358:	2e c0       	rjmp	.+92     	; 0x3b6 <main+0x11e>
	}
	else
	{
		lcd_clrscr();
 35a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
		display = 1;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <display+0x1>
 366:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <display>
		lcd_init(LCD_DISP_ON);
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
		lcd_gotoxy(0, 0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_puts("Distance:");
 378:	8c e1       	ldi	r24, 0x1C	; 28
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		lcd_gotoxy(0, 1);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_puts("Temp:");
 388:	86 e1       	ldi	r24, 0x16	; 22
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		lcd_gotoxy(13, 0);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_puts("cm");
 398:	86 e2       	ldi	r24, 0x26	; 38
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		lcd_gotoxy(13, 1);
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	8d e0       	ldi	r24, 0x0D	; 13
 3a4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_putc(0);
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
		lcd_puts("C");
 3ae:	89 e2       	ldi	r24, 0x29	; 41
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	}
	
	if (((PINC >> TEMPERATURE) & 1) != 0){state[0]=3;}
 3b6:	31 9b       	sbis	0x06, 1	; 6
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <main+0x130>
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <state+0x1>
 3c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state>
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <main+0x13c>
	else{state[0]=1;}
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <state+0x1>
 3d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state>
		
	if (((PINC >> PUMP) & 1) != 0){state[2]=0;}
 3d4:	33 9b       	sbis	0x06, 3	; 6
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <main+0x14a>
 3d8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state+0x5>
 3dc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state+0x4>
 3e0:	06 c0       	rjmp	.+12     	; 0x3ee <main+0x156>
	else{state[2]=1;}
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <state+0x5>
 3ea:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state+0x4>
		
	if (((PINC >> VALVE) & 1) != 0){state[3]=0;}
 3ee:	34 9b       	sbis	0x06, 4	; 6
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <main+0x164>
 3f2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state+0x7>
 3f6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <state+0x6>
 3fa:	06 c0       	rjmp	.+12     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	else{state[3]=1;}
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <state+0x7>
 404:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <state+0x6>
	//**************
	
	// Configure ADC to convert PC0[A0] analog value
	
	// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
 408:	ec e7       	ldi	r30, 0x7C	; 124
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	80 83       	st	Z, r24
	ADMUX  &= ~ (1<<REFS1);
 412:	80 81       	ld	r24, Z
 414:	8f 77       	andi	r24, 0x7F	; 127
 416:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &= ~ (1<<MUX0);
 418:	80 81       	ld	r24, Z
 41a:	8e 7f       	andi	r24, 0xFE	; 254
 41c:	80 83       	st	Z, r24
	ADMUX &= ~ (1<<MUX1);
 41e:	80 81       	ld	r24, Z
 420:	8d 7f       	andi	r24, 0xFD	; 253
 422:	80 83       	st	Z, r24
	ADMUX &= ~ (1<<MUX2);
 424:	80 81       	ld	r24, Z
 426:	8b 7f       	andi	r24, 0xFB	; 251
 428:	80 83       	st	Z, r24
	ADMUX &= ~ (1<<MUX3);
 42a:	80 81       	ld	r24, Z
 42c:	87 7f       	andi	r24, 0xF7	; 247
 42e:	80 83       	st	Z, r24
	
	// Enable ADC module
	ADCSRA |= (1<<ADEN);
 430:	ea e7       	ldi	r30, 0x7A	; 122
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	80 68       	ori	r24, 0x80	; 128
 438:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
 43a:	80 81       	ld	r24, Z
 43c:	88 60       	ori	r24, 0x08	; 8
 43e:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	ADCSRA |= (1<<ADPS0);
 440:	80 81       	ld	r24, Z
 442:	81 60       	ori	r24, 0x01	; 1
 444:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
 446:	80 81       	ld	r24, Z
 448:	82 60       	ori	r24, 0x02	; 2
 44a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
 44c:	80 81       	ld	r24, Z
 44e:	84 60       	ori	r24, 0x04	; 4
 450:	80 83       	st	Z, r24
	//Interrupts
	TIM2_overflow_16ms();
 452:	e1 eb       	ldi	r30, 0xB1	; 177
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	87 60       	ori	r24, 0x07	; 7
 45a:	80 83       	st	Z, r24
	TIM1_overflow_1s();
 45c:	e1 e8       	ldi	r30, 0x81	; 129
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	8c 7f       	andi	r24, 0xFC	; 252
 464:	80 83       	st	Z, r24
 466:	80 81       	ld	r24, Z
 468:	84 60       	ori	r24, 0x04	; 4
 46a:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 46c:	e0 e7       	ldi	r30, 0x70	; 112
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	81 60       	ori	r24, 0x01	; 1
 474:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();		
 476:	ef e6       	ldi	r30, 0x6F	; 111
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	81 60       	ori	r24, 0x01	; 1
 47e:	80 83       	st	Z, r24
	sei();
 480:	78 94       	sei
 482:	ff cf       	rjmp	.-2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>

00000484 <LCD>:
    }
	return 0;
}
//Void to draw out LCD
void LCD()
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	00 d0       	rcall	.+0      	; 0x48a <LCD+0x6>
 48a:	00 d0       	rcall	.+0      	; 0x48c <LCD+0x8>
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
	char lcd_string[4] = "0000";
 490:	80 e3       	ldi	r24, 0x30	; 48
 492:	90 e3       	ldi	r25, 0x30	; 48
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	9c 83       	std	Y+4, r25	; 0x04
 49a:	8b 83       	std	Y+3, r24	; 0x03
	if (display == 1)
 49c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <display>
 4a0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <display+0x1>
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <LCD+0x26>
 4a8:	58 c0       	rjmp	.+176    	; 0x55a <LCD+0xd6>
	{
		if(state[0] == 1 ||state[0] == 3)
 4aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <state>
 4ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <state+0x1>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	91 05       	cpc	r25, r1
 4b6:	11 f0       	breq	.+4      	; 0x4bc <LCD+0x38>
 4b8:	03 97       	sbiw	r24, 0x03	; 3
 4ba:	a9 f5       	brne	.+106    	; 0x526 <LCD+0xa2>
		{
			//Distance sensor
			lcd_gotoxy(10, 0);
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts("   ");
 4c4:	8d e6       	ldi	r24, 0x6D	; 109
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4cc:	4a e0       	ldi	r20, 0x0A	; 10
 4ce:	be 01       	movw	r22, r28
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <depth>
 4d8:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <depth+0x1>
 4dc:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
			itoa(depth, lcd_string, 10);
			lcd_gotoxy(10, 0);
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	8a e0       	ldi	r24, 0x0A	; 10
 4e4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts(lcd_string);
 4e8:	ce 01       	movw	r24, r28
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 4f0:	4a e0       	ldi	r20, 0x0A	; 10
 4f2:	be 01       	movw	r22, r28
 4f4:	6f 5f       	subi	r22, 0xFF	; 255
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <temp>
 4fc:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <temp+0x1>
 500:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
		
			//Temperature sensor
			itoa(temp, lcd_string, 10);
			lcd_gotoxy(10, 1);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	8a e0       	ldi	r24, 0x0A	; 10
 508:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts("   ");
 50c:	8d e6       	ldi	r24, 0x6D	; 109
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
			lcd_gotoxy(10, 1);
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	8a e0       	ldi	r24, 0x0A	; 10
 518:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts(lcd_string);
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 524:	7a c0       	rjmp	.+244    	; 0x61a <LCD+0x196>
		}
		else
		{
			lcd_clrscr();
 526:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
			lcd_gotoxy(0, 0);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts("Warning the temperature");
 532:	8b e2       	ldi	r24, 0x2B	; 43
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
			lcd_gotoxy(0, 1);
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts("was below 100");
 542:	83 e4       	ldi	r24, 0x43	; 67
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
			lcd_putc(0);
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
			lcd_puts("C");
 550:	89 e2       	ldi	r24, 0x29	; 41
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 558:	60 c0       	rjmp	.+192    	; 0x61a <LCD+0x196>
		}
	}
	else
	{
		if(state[0] != 2)
 55a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <state>
 55e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <state+0x1>
 562:	02 97       	sbiw	r24, 0x02	; 2
 564:	09 f4       	brne	.+2      	; 0x568 <LCD+0xe4>
 566:	40 c0       	rjmp	.+128    	; 0x5e8 <LCD+0x164>
		{
			//Distance sensor
			lcd_gotoxy(6, 0);
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			switch (state[1])
 570:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state+0x2>
 574:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <state+0x3>
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	91 05       	cpc	r25, r1
 57c:	99 f0       	breq	.+38     	; 0x5a4 <LCD+0x120>
 57e:	1c f4       	brge	.+6      	; 0x586 <LCD+0x102>
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	39 f0       	breq	.+14     	; 0x592 <LCD+0x10e>
 584:	1d c0       	rjmp	.+58     	; 0x5c0 <LCD+0x13c>
 586:	83 30       	cpi	r24, 0x03	; 3
 588:	91 05       	cpc	r25, r1
 58a:	89 f0       	breq	.+34     	; 0x5ae <LCD+0x12a>
 58c:	04 97       	sbiw	r24, 0x04	; 4
 58e:	a1 f0       	breq	.+40     	; 0x5b8 <LCD+0x134>
 590:	17 c0       	rjmp	.+46     	; 0x5c0 <LCD+0x13c>
			{
				case 1:
					lcd_gotoxy(6, 0);
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	86 e0       	ldi	r24, 0x06	; 6
 596:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
					lcd_puts("filling");
 59a:	81 e5       	ldi	r24, 0x51	; 81
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
					break;
 5a2:	0e c0       	rjmp	.+28     	; 0x5c0 <LCD+0x13c>
				case 2:
				    lcd_puts("normal ");
 5a4:	89 e5       	ldi	r24, 0x59	; 89
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
					break;
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <LCD+0x13c>
				case 3:
					lcd_puts("full   ");
 5ae:	81 e6       	ldi	r24, 0x61	; 97
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
					break;
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <LCD+0x13c>
				case 4:
					lcd_puts("off    ");
 5b8:	89 e6       	ldi	r24, 0x69	; 105
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
					break;
			}
			//Temperature sensor
			lcd_gotoxy(6, 1);
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	86 e0       	ldi	r24, 0x06	; 6
 5c4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			if (state[0] == 3)
 5c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <state>
 5cc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <state+0x1>
 5d0:	03 97       	sbiw	r24, 0x03	; 3
 5d2:	29 f4       	brne	.+10     	; 0x5de <LCD+0x15a>
			{
				lcd_puts("off");
 5d4:	81 e7       	ldi	r24, 0x71	; 113
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 5dc:	1e c0       	rjmp	.+60     	; 0x61a <LCD+0x196>
			}
			else
			{
				lcd_puts("on ");
 5de:	85 e7       	ldi	r24, 0x75	; 117
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 5e6:	19 c0       	rjmp	.+50     	; 0x61a <LCD+0x196>
			}
		}
		else
		{
			lcd_clrscr();
 5e8:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
			lcd_gotoxy(0, 0);
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts("Warning the temperature");
 5f4:	8b e2       	ldi	r24, 0x2B	; 43
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
			lcd_gotoxy(0, 1);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts("was below 100");
 604:	83 e4       	ldi	r24, 0x43	; 67
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
			lcd_putc(0);
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
			lcd_puts("C");
 612:	89 e2       	ldi	r24, 0x29	; 41
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		}
		
	}
}
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <__vector_21>:
ISR(ADC_vect)
{
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
	temp = ADC;   
 636:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 63a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 63e:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <temp+0x1>
 642:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <temp>
	if(temp < 100 && state[0] != 3)
 646:	84 36       	cpi	r24, 0x64	; 100
 648:	91 05       	cpc	r25, r1
 64a:	64 f4       	brge	.+24     	; 0x664 <__vector_21+0x3c>
 64c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <state>
 650:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <state+0x1>
 654:	03 97       	sbiw	r24, 0x03	; 3
 656:	31 f0       	breq	.+12     	; 0x664 <__vector_21+0x3c>
	{
		state[0] = 2;
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <state+0x1>
 660:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state>
	}          
}
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <__vector_13>:
ISR(TIMER1_OVF_vect)
{
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	2f 93       	push	r18
 67e:	3f 93       	push	r19
 680:	4f 93       	push	r20
 682:	5f 93       	push	r21
 684:	6f 93       	push	r22
 686:	7f 93       	push	r23
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
 68c:	af 93       	push	r26
 68e:	bf 93       	push	r27
 690:	ef 93       	push	r30
 692:	ff 93       	push	r31
	static int out = 0;
	static int j = 0;
	//Distance sensor
	PORTB = PORTB ^ (1<<TRIG);
 694:	95 b1       	in	r25, 0x05	; 5
 696:	80 e2       	ldi	r24, 0x20	; 32
 698:	98 27       	eor	r25, r24
 69a:	95 b9       	out	0x05, r25	; 5
 69c:	25 e3       	ldi	r18, 0x35	; 53
 69e:	2a 95       	dec	r18
 6a0:	f1 f7       	brne	.-4      	; 0x69e <__vector_13+0x2c>
 6a2:	00 00       	nop
	_delay_us(10);
	PORTB = PORTB ^ (1<<TRIG);
 6a4:	95 b1       	in	r25, 0x05	; 5
 6a6:	89 27       	eor	r24, r25
 6a8:	85 b9       	out	0x05, r24	; 5
	while (out == 0)
 6aa:	44 c0       	rjmp	.+136    	; 0x734 <__vector_13+0xc2>
	{
		if (((PINB >> ECHO) & 1) != 0)
 6ac:	1c 9b       	sbis	0x03, 4	; 3
 6ae:	42 c0       	rjmp	.+132    	; 0x734 <__vector_13+0xc2>
		{
			depth = 0;
 6b0:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <depth>
 6b4:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <depth+0x1>
 6b8:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <depth+0x2>
 6bc:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <depth+0x3>
			while(((PINB >> ECHO) & 1) != 0)
 6c0:	17 c0       	rjmp	.+46     	; 0x6f0 <__vector_13+0x7e>
 6c2:	85 e0       	ldi	r24, 0x05	; 5
 6c4:	8a 95       	dec	r24
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <__vector_13+0x52>
 6c8:	00 00       	nop
			{
				_delay_us(1);
				depth++;
 6ca:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <depth>
 6ce:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <depth+0x1>
 6d2:	a0 91 84 01 	lds	r26, 0x0184	; 0x800184 <depth+0x2>
 6d6:	b0 91 85 01 	lds	r27, 0x0185	; 0x800185 <depth+0x3>
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	a1 1d       	adc	r26, r1
 6de:	b1 1d       	adc	r27, r1
 6e0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <depth>
 6e4:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <depth+0x1>
 6e8:	a0 93 84 01 	sts	0x0184, r26	; 0x800184 <depth+0x2>
 6ec:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <depth+0x3>
	while (out == 0)
	{
		if (((PINB >> ECHO) & 1) != 0)
		{
			depth = 0;
			while(((PINB >> ECHO) & 1) != 0)
 6f0:	1c 99       	sbic	0x03, 4	; 3
 6f2:	e7 cf       	rjmp	.-50     	; 0x6c2 <__vector_13+0x50>
			{
				_delay_us(1);
				depth++;
			}
			depth = depth*42/1000;
 6f4:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <depth>
 6f8:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <depth+0x1>
 6fc:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <depth+0x2>
 700:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <depth+0x3>
 704:	aa e2       	ldi	r26, 0x2A	; 42
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	0e 94 38 05 	call	0xa70	; 0xa70 <__muluhisi3>
 70c:	28 ee       	ldi	r18, 0xE8	; 232
 70e:	33 e0       	ldi	r19, 0x03	; 3
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	0e 94 19 05 	call	0xa32	; 0xa32 <__divmodsi4>
 718:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <depth>
 71c:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <depth+0x1>
 720:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <depth+0x2>
 724:	50 93 85 01 	sts	0x0185, r21	; 0x800185 <depth+0x3>
			out = 1;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <out.2095+0x1>
 730:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <out.2095>
	static int j = 0;
	//Distance sensor
	PORTB = PORTB ^ (1<<TRIG);
	_delay_us(10);
	PORTB = PORTB ^ (1<<TRIG);
	while (out == 0)
 734:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <out.2095>
 738:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <out.2095+0x1>
 73c:	89 2b       	or	r24, r25
 73e:	09 f4       	brne	.+2      	; 0x742 <__vector_13+0xd0>
 740:	b5 cf       	rjmp	.-150    	; 0x6ac <__vector_13+0x3a>
			depth = depth*42/1000;
			out = 1;

		}
	}
	if(state[1] == 4){}
 742:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state+0x2>
 746:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <state+0x3>
 74a:	04 97       	sbiw	r24, 0x04	; 4
 74c:	31 f1       	breq	.+76     	; 0x79a <__vector_13+0x128>
	else if (depth<20){state[1] = 3;}
 74e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <depth>
 752:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <depth+0x1>
 756:	a0 91 84 01 	lds	r26, 0x0184	; 0x800184 <depth+0x2>
 75a:	b0 91 85 01 	lds	r27, 0x0185	; 0x800185 <depth+0x3>
 75e:	84 31       	cpi	r24, 0x14	; 20
 760:	91 05       	cpc	r25, r1
 762:	a1 05       	cpc	r26, r1
 764:	b1 05       	cpc	r27, r1
 766:	3c f4       	brge	.+14     	; 0x776 <__vector_13+0x104>
 768:	83 e0       	ldi	r24, 0x03	; 3
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <state+0x3>
 770:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state+0x2>
 774:	12 c0       	rjmp	.+36     	; 0x79a <__vector_13+0x128>
	else if (depth>280){state[1] = 1;}
 776:	89 31       	cpi	r24, 0x19	; 25
 778:	91 40       	sbci	r25, 0x01	; 1
 77a:	a1 05       	cpc	r26, r1
 77c:	b1 05       	cpc	r27, r1
 77e:	3c f0       	brlt	.+14     	; 0x78e <__vector_13+0x11c>
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <state+0x3>
 788:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state+0x2>
 78c:	06 c0       	rjmp	.+12     	; 0x79a <__vector_13+0x128>
	else{state[1] = 2;}
 78e:	82 e0       	ldi	r24, 0x02	; 2
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <state+0x3>
 796:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state+0x2>
	ADCSRA |= (1<<ADSC);
 79a:	ea e7       	ldi	r30, 0x7A	; 122
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	80 64       	ori	r24, 0x40	; 64
 7a2:	80 83       	st	Z, r24
	out = 0;
 7a4:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <out.2095+0x1>
 7a8:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <out.2095>
	LCD();
 7ac:	0e 94 42 02 	call	0x484	; 0x484 <LCD>
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if(j > 0)
 7b0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 7b4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 7b8:	18 16       	cp	r1, r24
 7ba:	19 06       	cpc	r1, r25
 7bc:	74 f4       	brge	.+28     	; 0x7da <__vector_13+0x168>
	{
		j++;
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 7c4:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
		if (j>9)
 7c8:	0a 97       	sbiw	r24, 0x0a	; 10
 7ca:	3c f0       	brlt	.+14     	; 0x7da <__vector_13+0x168>
		{
			j=0;
 7cc:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <__data_end+0x1>
 7d0:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__data_end>
			PORTD = PORTD & ~(1<<LEDP);
 7d4:	8b b1       	in	r24, 0x0b	; 11
 7d6:	8e 7f       	andi	r24, 0xFE	; 254
 7d8:	8b b9       	out	0x0b, r24	; 11
		}
	}
	if(state[1] == 1 && state[2] == 1)
 7da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state+0x2>
 7de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <state+0x3>
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	79 f4       	brne	.+30     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state+0x4>
 7ea:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <state+0x5>
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	49 f4       	brne	.+18     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	{
		PORTD = PORTD | (1<<LEDP);
 7f2:	8b b1       	in	r24, 0x0b	; 11
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	8b b9       	out	0x0b, r24	; 11
		j = 1;
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 800:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
	}
	
	if(state[1] == 3 && state[3] == 1){PORTD = PORTD | (1<<LEDV);}
 804:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state+0x2>
 808:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <state+0x3>
 80c:	03 97       	sbiw	r24, 0x03	; 3
 80e:	51 f4       	brne	.+20     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 810:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <state+0x6>
 814:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <state+0x7>
 818:	01 97       	sbiw	r24, 0x01	; 1
 81a:	21 f4       	brne	.+8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 81c:	8b b1       	in	r24, 0x0b	; 11
 81e:	82 60       	ori	r24, 0x02	; 2
 820:	8b b9       	out	0x0b, r24	; 11
 822:	03 c0       	rjmp	.+6      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
	else{PORTD = PORTD & ~(1<<LEDV);}
 824:	8b b1       	in	r24, 0x0b	; 11
 826:	8d 7f       	andi	r24, 0xFD	; 253
 828:	8b b9       	out	0x0b, r24	; 11
}
 82a:	ff 91       	pop	r31
 82c:	ef 91       	pop	r30
 82e:	bf 91       	pop	r27
 830:	af 91       	pop	r26
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	7f 91       	pop	r23
 838:	6f 91       	pop	r22
 83a:	5f 91       	pop	r21
 83c:	4f 91       	pop	r20
 83e:	3f 91       	pop	r19
 840:	2f 91       	pop	r18
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <__vector_9>:
//switch detection
ISR(TIMER2_OVF_vect)
{
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	2f 93       	push	r18
 858:	3f 93       	push	r19
 85a:	4f 93       	push	r20
 85c:	5f 93       	push	r21
 85e:	6f 93       	push	r22
 860:	7f 93       	push	r23
 862:	8f 93       	push	r24
 864:	9f 93       	push	r25
 866:	af 93       	push	r26
 868:	bf 93       	push	r27
 86a:	ef 93       	push	r30
 86c:	ff 93       	push	r31
	//Display button
	if ((((PINC >> PINDISPLAY) & 1) != 0))//button off
 86e:	32 9b       	sbis	0x06, 2	; 6
 870:	21 c0       	rjmp	.+66     	; 0x8b4 <__vector_9+0x68>
	{
		if (display == 1)
 872:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <display>
 876:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <display+0x1>
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	09 f0       	breq	.+2      	; 0x880 <__vector_9+0x34>
 87e:	4e c0       	rjmp	.+156    	; 0x91c <__stack+0x1d>
		{
			lcd_clrscr();
 880:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
			display = 0;
 884:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <display+0x1>
 888:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <display>
			lcd_init(LCD_DISP_ON);
 88c:	8c e0       	ldi	r24, 0x0C	; 12
 88e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
			lcd_gotoxy(0, 0);
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts("Tank:");
 89a:	80 e1       	ldi	r24, 0x10	; 16
 89c:	91 e0       	ldi	r25, 0x01	; 1
 89e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
			lcd_gotoxy(0, 1);
 8a2:	61 e0       	ldi	r22, 0x01	; 1
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts("Temp:");
 8aa:	86 e1       	ldi	r24, 0x16	; 22
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 8b2:	34 c0       	rjmp	.+104    	; 0x91c <__stack+0x1d>
		}
	}

	
	else if (display == 0) //button on	
 8b4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <display>
 8b8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <display+0x1>
 8bc:	89 2b       	or	r24, r25
 8be:	71 f5       	brne	.+92     	; 0x91c <__stack+0x1d>
	{
		lcd_clrscr();
 8c0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
		display = 1;
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <display+0x1>
 8cc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <display>
		lcd_init(LCD_DISP_ON);
 8d0:	8c e0       	ldi	r24, 0x0C	; 12
 8d2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
		lcd_gotoxy(0, 0);
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_puts("Distance:");
 8de:	8c e1       	ldi	r24, 0x1C	; 28
 8e0:	91 e0       	ldi	r25, 0x01	; 1
 8e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		lcd_gotoxy(0, 1);
 8e6:	61 e0       	ldi	r22, 0x01	; 1
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_puts("Temp:");
 8ee:	86 e1       	ldi	r24, 0x16	; 22
 8f0:	91 e0       	ldi	r25, 0x01	; 1
 8f2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		lcd_gotoxy(13, 0);
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	8d e0       	ldi	r24, 0x0D	; 13
 8fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_puts("cm");
 8fe:	86 e2       	ldi	r24, 0x26	; 38
 900:	91 e0       	ldi	r25, 0x01	; 1
 902:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		lcd_gotoxy(13, 1);
 906:	61 e0       	ldi	r22, 0x01	; 1
 908:	8d e0       	ldi	r24, 0x0D	; 13
 90a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_putc(0);
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
		lcd_puts("C");
 914:	89 e2       	ldi	r24, 0x29	; 41
 916:	91 e0       	ldi	r25, 0x01	; 1
 918:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	}
	//Temperature buton
	if ((((PINC >> TEMPERATURE) & 1) != 0))//button off
 91c:	31 9b       	sbis	0x06, 1	; 6
 91e:	52 c0       	rjmp	.+164    	; 0x9c4 <__stack+0xc5>
	{
		if (state[0]!=3)
 920:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <state>
 924:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <state+0x1>
 928:	03 97       	sbiw	r24, 0x03	; 3
 92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x2f>
 92c:	57 c0       	rjmp	.+174    	; 0x9dc <__stack+0xdd>
		{
			state[0]=3;
 92e:	83 e0       	ldi	r24, 0x03	; 3
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <state+0x1>
 936:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state>
			if (display ==1)
 93a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <display>
 93e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <display+0x1>
 942:	01 97       	sbiw	r24, 0x01	; 1
 944:	49 f5       	brne	.+82     	; 0x998 <__stack+0x99>
			{
				lcd_clrscr();
 946:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
				lcd_init(LCD_DISP_ON);
 94a:	8c e0       	ldi	r24, 0x0C	; 12
 94c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
				lcd_gotoxy(0, 0);
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
				lcd_puts("Distance:");
 958:	8c e1       	ldi	r24, 0x1C	; 28
 95a:	91 e0       	ldi	r25, 0x01	; 1
 95c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
				lcd_gotoxy(0, 1);
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
				lcd_puts("Temp:");
 968:	86 e1       	ldi	r24, 0x16	; 22
 96a:	91 e0       	ldi	r25, 0x01	; 1
 96c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
				lcd_gotoxy(13, 0);
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	8d e0       	ldi	r24, 0x0D	; 13
 974:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
				lcd_puts("cm");
 978:	86 e2       	ldi	r24, 0x26	; 38
 97a:	91 e0       	ldi	r25, 0x01	; 1
 97c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
				lcd_gotoxy(13, 1);
 980:	61 e0       	ldi	r22, 0x01	; 1
 982:	8d e0       	ldi	r24, 0x0D	; 13
 984:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
				lcd_putc(0);
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
				lcd_puts("C");
 98e:	89 e2       	ldi	r24, 0x29	; 41
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 996:	22 c0       	rjmp	.+68     	; 0x9dc <__stack+0xdd>
			}
			else
			{
				lcd_clrscr();
 998:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
				lcd_init(LCD_DISP_ON);
 99c:	8c e0       	ldi	r24, 0x0C	; 12
 99e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>
				lcd_gotoxy(0, 0);
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	80 e0       	ldi	r24, 0x00	; 0
 9a6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
				lcd_puts("Tank:");
 9aa:	80 e1       	ldi	r24, 0x10	; 16
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
				lcd_gotoxy(0, 1);
 9b2:	61 e0       	ldi	r22, 0x01	; 1
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
				lcd_puts("Temp:");
 9ba:	86 e1       	ldi	r24, 0x16	; 22
 9bc:	91 e0       	ldi	r25, 0x01	; 1
 9be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 9c2:	0c c0       	rjmp	.+24     	; 0x9dc <__stack+0xdd>
			}
		}
	}

		
	else if (state[0]==3) //button on
 9c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <state>
 9c8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <state+0x1>
 9cc:	03 97       	sbiw	r24, 0x03	; 3
 9ce:	31 f4       	brne	.+12     	; 0x9dc <__stack+0xdd>
	{
		state[0]=1;
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <state+0x1>
 9d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state>
	}	
	//****************************
	if (((PINC >> VALVE) & 1) != 0){state[3]=0;}
 9dc:	34 9b       	sbis	0x06, 4	; 6
 9de:	05 c0       	rjmp	.+10     	; 0x9ea <__stack+0xeb>
 9e0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state+0x7>
 9e4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <state+0x6>
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0xf7>
	else{state[3]=1;}
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <state+0x7>
 9f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <state+0x6>
		
	if (((PINC >> PUMP) & 1) != 0){state[2]=0;}
 9f6:	33 9b       	sbis	0x06, 3	; 6
 9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__stack+0x105>
 9fa:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state+0x5>
 9fe:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state+0x4>
 a02:	06 c0       	rjmp	.+12     	; 0xa10 <__stack+0x111>
	else{state[2]=1;}
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <state+0x5>
 a0c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state+0x4>
}
 a10:	ff 91       	pop	r31
 a12:	ef 91       	pop	r30
 a14:	bf 91       	pop	r27
 a16:	af 91       	pop	r26
 a18:	9f 91       	pop	r25
 a1a:	8f 91       	pop	r24
 a1c:	7f 91       	pop	r23
 a1e:	6f 91       	pop	r22
 a20:	5f 91       	pop	r21
 a22:	4f 91       	pop	r20
 a24:	3f 91       	pop	r19
 a26:	2f 91       	pop	r18
 a28:	0f 90       	pop	r0
 a2a:	0f be       	out	0x3f, r0	; 63
 a2c:	0f 90       	pop	r0
 a2e:	1f 90       	pop	r1
 a30:	18 95       	reti

00000a32 <__divmodsi4>:
 a32:	05 2e       	mov	r0, r21
 a34:	97 fb       	bst	r25, 7
 a36:	1e f4       	brtc	.+6      	; 0xa3e <__divmodsi4+0xc>
 a38:	00 94       	com	r0
 a3a:	0e 94 30 05 	call	0xa60	; 0xa60 <__negsi2>
 a3e:	57 fd       	sbrc	r21, 7
 a40:	07 d0       	rcall	.+14     	; 0xa50 <__divmodsi4_neg2>
 a42:	0e 94 43 05 	call	0xa86	; 0xa86 <__udivmodsi4>
 a46:	07 fc       	sbrc	r0, 7
 a48:	03 d0       	rcall	.+6      	; 0xa50 <__divmodsi4_neg2>
 a4a:	4e f4       	brtc	.+18     	; 0xa5e <__divmodsi4_exit>
 a4c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__negsi2>

00000a50 <__divmodsi4_neg2>:
 a50:	50 95       	com	r21
 a52:	40 95       	com	r20
 a54:	30 95       	com	r19
 a56:	21 95       	neg	r18
 a58:	3f 4f       	sbci	r19, 0xFF	; 255
 a5a:	4f 4f       	sbci	r20, 0xFF	; 255
 a5c:	5f 4f       	sbci	r21, 0xFF	; 255

00000a5e <__divmodsi4_exit>:
 a5e:	08 95       	ret

00000a60 <__negsi2>:
 a60:	90 95       	com	r25
 a62:	80 95       	com	r24
 a64:	70 95       	com	r23
 a66:	61 95       	neg	r22
 a68:	7f 4f       	sbci	r23, 0xFF	; 255
 a6a:	8f 4f       	sbci	r24, 0xFF	; 255
 a6c:	9f 4f       	sbci	r25, 0xFF	; 255
 a6e:	08 95       	ret

00000a70 <__muluhisi3>:
 a70:	0e 94 65 05 	call	0xaca	; 0xaca <__umulhisi3>
 a74:	a5 9f       	mul	r26, r21
 a76:	90 0d       	add	r25, r0
 a78:	b4 9f       	mul	r27, r20
 a7a:	90 0d       	add	r25, r0
 a7c:	a4 9f       	mul	r26, r20
 a7e:	80 0d       	add	r24, r0
 a80:	91 1d       	adc	r25, r1
 a82:	11 24       	eor	r1, r1
 a84:	08 95       	ret

00000a86 <__udivmodsi4>:
 a86:	a1 e2       	ldi	r26, 0x21	; 33
 a88:	1a 2e       	mov	r1, r26
 a8a:	aa 1b       	sub	r26, r26
 a8c:	bb 1b       	sub	r27, r27
 a8e:	fd 01       	movw	r30, r26
 a90:	0d c0       	rjmp	.+26     	; 0xaac <__udivmodsi4_ep>

00000a92 <__udivmodsi4_loop>:
 a92:	aa 1f       	adc	r26, r26
 a94:	bb 1f       	adc	r27, r27
 a96:	ee 1f       	adc	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	a2 17       	cp	r26, r18
 a9c:	b3 07       	cpc	r27, r19
 a9e:	e4 07       	cpc	r30, r20
 aa0:	f5 07       	cpc	r31, r21
 aa2:	20 f0       	brcs	.+8      	; 0xaac <__udivmodsi4_ep>
 aa4:	a2 1b       	sub	r26, r18
 aa6:	b3 0b       	sbc	r27, r19
 aa8:	e4 0b       	sbc	r30, r20
 aaa:	f5 0b       	sbc	r31, r21

00000aac <__udivmodsi4_ep>:
 aac:	66 1f       	adc	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	88 1f       	adc	r24, r24
 ab2:	99 1f       	adc	r25, r25
 ab4:	1a 94       	dec	r1
 ab6:	69 f7       	brne	.-38     	; 0xa92 <__udivmodsi4_loop>
 ab8:	60 95       	com	r22
 aba:	70 95       	com	r23
 abc:	80 95       	com	r24
 abe:	90 95       	com	r25
 ac0:	9b 01       	movw	r18, r22
 ac2:	ac 01       	movw	r20, r24
 ac4:	bd 01       	movw	r22, r26
 ac6:	cf 01       	movw	r24, r30
 ac8:	08 95       	ret

00000aca <__umulhisi3>:
 aca:	a2 9f       	mul	r26, r18
 acc:	b0 01       	movw	r22, r0
 ace:	b3 9f       	mul	r27, r19
 ad0:	c0 01       	movw	r24, r0
 ad2:	a3 9f       	mul	r26, r19
 ad4:	70 0d       	add	r23, r0
 ad6:	81 1d       	adc	r24, r1
 ad8:	11 24       	eor	r1, r1
 ada:	91 1d       	adc	r25, r1
 adc:	b2 9f       	mul	r27, r18
 ade:	70 0d       	add	r23, r0
 ae0:	81 1d       	adc	r24, r1
 ae2:	11 24       	eor	r1, r1
 ae4:	91 1d       	adc	r25, r1
 ae6:	08 95       	ret

00000ae8 <__itoa_ncheck>:
 ae8:	bb 27       	eor	r27, r27
 aea:	4a 30       	cpi	r20, 0x0A	; 10
 aec:	31 f4       	brne	.+12     	; 0xafa <__itoa_ncheck+0x12>
 aee:	99 23       	and	r25, r25
 af0:	22 f4       	brpl	.+8      	; 0xafa <__itoa_ncheck+0x12>
 af2:	bd e2       	ldi	r27, 0x2D	; 45
 af4:	90 95       	com	r25
 af6:	81 95       	neg	r24
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__utoa_common>

00000afe <__utoa_ncheck>:
 afe:	bb 27       	eor	r27, r27

00000b00 <__utoa_common>:
 b00:	fb 01       	movw	r30, r22
 b02:	55 27       	eor	r21, r21
 b04:	aa 27       	eor	r26, r26
 b06:	88 0f       	add	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	aa 1f       	adc	r26, r26
 b0c:	a4 17       	cp	r26, r20
 b0e:	10 f0       	brcs	.+4      	; 0xb14 <__utoa_common+0x14>
 b10:	a4 1b       	sub	r26, r20
 b12:	83 95       	inc	r24
 b14:	50 51       	subi	r21, 0x10	; 16
 b16:	b9 f7       	brne	.-18     	; 0xb06 <__utoa_common+0x6>
 b18:	a0 5d       	subi	r26, 0xD0	; 208
 b1a:	aa 33       	cpi	r26, 0x3A	; 58
 b1c:	08 f0       	brcs	.+2      	; 0xb20 <__utoa_common+0x20>
 b1e:	a9 5d       	subi	r26, 0xD9	; 217
 b20:	a1 93       	st	Z+, r26
 b22:	00 97       	sbiw	r24, 0x00	; 0
 b24:	79 f7       	brne	.-34     	; 0xb04 <__utoa_common+0x4>
 b26:	b1 11       	cpse	r27, r1
 b28:	b1 93       	st	Z+, r27
 b2a:	11 92       	st	Z+, r1
 b2c:	cb 01       	movw	r24, r22
 b2e:	0c 94 99 05 	jmp	0xb32	; 0xb32 <strrev>

00000b32 <strrev>:
 b32:	dc 01       	movw	r26, r24
 b34:	fc 01       	movw	r30, r24
 b36:	67 2f       	mov	r22, r23
 b38:	71 91       	ld	r23, Z+
 b3a:	77 23       	and	r23, r23
 b3c:	e1 f7       	brne	.-8      	; 0xb36 <strrev+0x4>
 b3e:	32 97       	sbiw	r30, 0x02	; 2
 b40:	04 c0       	rjmp	.+8      	; 0xb4a <strrev+0x18>
 b42:	7c 91       	ld	r23, X
 b44:	6d 93       	st	X+, r22
 b46:	70 83       	st	Z, r23
 b48:	62 91       	ld	r22, -Z
 b4a:	ae 17       	cp	r26, r30
 b4c:	bf 07       	cpc	r27, r31
 b4e:	c8 f3       	brcs	.-14     	; 0xb42 <strrev+0x10>
 b50:	08 95       	ret

00000b52 <_exit>:
 b52:	f8 94       	cli

00000b54 <__stop_program>:
 b54:	ff cf       	rjmp	.-2      	; 0xb54 <__stop_program>
